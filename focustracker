#!/home/george/.pyenv/versions/venv/envs/dropmoda/bin/python3
import datetime, os, sys, yaml

from xpybutil import root as root_wid
from xpybutil.window import listen
from xpybutil.event import connect, disconnect
from xpybutil.event import main as event_loop
from xpybutil.util import get_atom_name
from utils import Window, get_active_window

# Todo: track idles (Mouse/KB events?)
# Todo: Put event listener in a separate thread
# Todo: Don't log a new log if the class/title doesn't change; don't write new log line if nothing except the timestamp changed

class FocusState():
    _focused_window = None
    logging_dir = os.path.join(os.environ.get("HOME"), '.config/focustracker/')
    last_input = None

    def __init__(self, log=True):
        os.makedirs(self.logging_dir, exist_ok=True)
        self.logfile_name = os.path.join(self.logging_dir, "log")
        self.logging_enabled = log

    @property
    def focused_window(self):
        return self._focused_window

    @focused_window.setter
    def focused_window(self, new_window):
        try:
            old_window = self._focused_window
            self._focused_window = new_window
            if old_window == None: # This is the first window we've seen
              self._focused_window = new_window
            if old_window and old_window.id != new_window.id:
                print("---- Window Changed ----")
                listen(new_window.id, 'PropertyChange')
                connect('PropertyNotify', new_window.id, self.handle_window_property_changed)
                disconnect('PropertyNotify', old_window.id)
            elif not old_window:
                listen(new_window.id, 'PropertyChange')
                connect('PropertyNotify', new_window.id, self.handle_window_property_changed)
        except Exception as e:
            raise e


    def log(self, msg):
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        msg = f"[{timestamp}] {msg}"
        print(msg)
        if self.logging_enabled:
            with open(self.logfile_name, "a") as logfile:
                logfile.write(f"{msg}\n")

    def handle_window_property_changed(self, e):
        if get_atom_name(e.atom) == "_NET_WM_NAME":
          win = get_active_window()
          if win:
              msg = f"{self.focused_window}"
              self.log(msg)

    def handle_windowchanged(self, e):
      try:
        if get_atom_name(e.atom) == '_NET_ACTIVE_WINDOW':
          # Do something whenever the active window changes
          active_window = get_active_window()
          if active_window:
              self.focused_window = active_window
              msg = f"{self.focused_window}"
              self.log(msg)
      except Exception as e:
          print("handler failed:", e.traceback)

def check_pid(pid):
    try:
        os.kill(pid,0)
    except OSError:
        return False
    else:
        return True

def set_lockfile():
    run_dir = os.environ.get("XDG_RUNTIME_DIR", "/run")
    lockfile_location = os.path.join(run_dir, "focustracker.pid")
    current_pid = os.getpid()
    lockfile_exists = os.path.exists(lockfile_location)
    if lockfile_exists:
        pid = open(lockfile_location, "r").read()
        existing_process_running = check_pid(int(pid))
    else:
        existing_process_running = False
    if existing_process_running:
        raise Exception("focustracker already running: {pid}")
    with open(lockfile_location, "w") as lockfile:
        lockfile.write(str(current_pid))

def remove_lockfile():
    run_dir = os.environ.get("XDG_RUNTIME_DIR", "/run")
    lockfile_location = os.path.join(run_dir, "focustracker.pid")
    os.remove(lockfile_location)

def parse_args():
  import argparse
  parser = argparse.ArgumentParser(description='Monitor Running windows')
  parser.add_argument('--debug', action='store_true',
                      help='Don\'t log to a file')
  return parser.parse_args()

if __name__ == "__main__":
  args = parse_args()
  log = not args.debug
  if not args.debug:
    set_lockfile()
  state = FocusState(log=log)
  listen(root_wid, "PropertyChange")
  connect('PropertyNotify', root_wid, state.handle_windowchanged)
  while True:
    try:
      event_loop()
    except KeyboardInterrupt: # todo: Handle other exit signals
        if not args.debug:
          remove_lockfile()
          sys.exit(0)
    except Exception as e:
        print("unhandled exception:", e)
        continue
